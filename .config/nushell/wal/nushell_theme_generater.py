import json
import os

def generate_nushell_theme(colors_data):
    """
    Generates a Nushell theme string from a given colors dictionary.

    Args:
        colors_data (dict): A dictionary containing color definitions,
                            likely from a JSON file generated by pywal.

    Returns:
        str: A string representing the Nushell color theme definition.
    """

    special_colors = colors_data.get("special", {})
    terminal_colors = colors_data.get("colors", {})

    # Map pywal colors to Nushell color names.
    # Adjust this mapping based on how you want your theme to look.
    color_palette = {
        "text": special_colors.get("foreground", "#c2c1c0"),
        "base": special_colors.get("background", "#0b0806"),
        "cursor": special_colors.get("cursor", "#c2c1c0"),
        "red": terminal_colors.get("color1", "#b86552"),
        "green": terminal_colors.get("color2", "#808459"),
        "yellow": terminal_colors.get("color3", "#a8724a"),
        "blue": terminal_colors.get("color4", "#ab6f54"),  # Example mapping
        "mauve": terminal_colors.get("color5", "#a66f6c"),  # Example mapping
        "peach": terminal_colors.get("color6", "#af7c42"),  # Example mapping
        "maroon": terminal_colors.get("color9", "#f6876e"), # Example mapping
        "teal": terminal_colors.get("color10", "#abb077"), # Example mapping
        "pink": terminal_colors.get("color13", "#de9491"), # Example mapping
        "lavender": terminal_colors.get("color14", "#eaa658"), # Example mapping
        "overlay0": terminal_colors.get("color7", "#958d89"), # Example mapping
        "overlay1": terminal_colors.get("color8", "#675b55"), # Example mapping
        "surface0": terminal_colors.get("color0", "#0b0806"), # Example mapping
        "surface1": terminal_colors.get("color8", "#675b55"), # Example mapping, adjust if needed
        "surface2": terminal_colors.get("color7", "#958d89"), # Example mapping, adjust if needed
        "subtext0": terminal_colors.get("color7", "#958d89"), # Example mapping, adjust if needed
        "subtext1": terminal_colors.get("color8", "#675b55"), # Example mapping, adjust if needed
        # Add more mappings as needed for the Nushell theme structure
        # Refer to your desired Nushell theme structure and pywal's color names (color0-color15)
    }

    # Construct the Nushell theme string.
    # This is a direct translation of the Nushell theme structure
    # using the mapped colors. Fill in the rest of the theme definitions
    # based on your requirements and the colors available in your JSON.
    nushell_theme = f"""export def main [] {{
    const color_palette = {{
        text: "{color_palette['text']}"
        base: "{color_palette['base']}"
        cursor: "{color_palette['cursor']}"
        red: "{color_palette['red']}"
        green: "{color_palette['green']}"
        yellow: "{color_palette['yellow']}"
        blue: "{color_palette['blue']}"
        mauve: "{color_palette['mauve']}"
        peach: "{color_palette['peach']}"
        maroon: "{color_palette['maroon']}"
        teal: "{color_palette['teal']}"
        pink: "{color_palette['pink']}"
        lavender: "{color_palette['lavender']}"
        overlay0: "{color_palette['overlay0']}"
        overlay1: "{color_palette['overlay1']}"
        surface0: "{color_palette['surface0']}"
        surface1: "{color_palette['surface1']}"
        surface2: "{color_palette['surface2']}"
        subtext0: "{color_palette['subtext0']}"
        subtext1: "{color_palette['subtext1']}"
        # Add more color definitions here based on your palette mapping
    }}

    return {{
        separator: $color_palette.overlay0
        leading_trailing_space_bg: {{ attr: "n" }}
        header: {{ fg: $color_palette.blue attr: "b" }}
        empty: $color_palette.lavender
        bool: $color_palette.lavender
        int: $color_palette.peach
        duration: $color_palette.text
        filesize: {{|e|
            if $e < 1mb {{
                $color_palette.green
            }} else if $e < 100mb {{
                $color_palette.yellow
            }} else if $e < 500mb {{
                $color_palette.peach
            }} else if $e < 800mb {{
                $color_palette.maroon
            }} else if $e > 800mb {{
                $color_palette.red
            }}
        }}
        date: {{|| (date now) - $in |
            if $in < 1hr {{
                $color_palette.green
            }} else if $in < 1day {{
                $color_palette.yellow
            }} else if $in < 3day {{
                $color_palette.peach
            }} else if $in < 1wk {{
                $color_palette.maroon
            }} else if $in > 1wk {{
                $color_palette.red
            }}
        }}
        range: $color_palette.text
        float: $color_palette.text
        string: $color_palette.text
        nothing: $color_palette.text
        binary: $color_palette.text
        'cell-path': $color_palette.text
        row_index: {{ fg: $color_palette.mauve attr: "b" }}
        record: $color_palette.text
        list: $color_palette.text
        block: $color_palette.text
        hints: $color_palette.overlay1
        search_result: {{ fg: $color_palette.red bg: $color_palette.text }}

        shape_and: {{ fg: $color_palette.pink attr: "b" }}
        shape_binary: {{ fg: $color_palette.pink attr: "b" }}
        shape_block: {{ fg: $color_palette.blue attr: "b" }}
        shape_bool: $color_palette.teal
        shape_custom: $color_palette.green
        shape_datetime: {{ fg: $color_palette.teal attr: "b" }}
        shape_directory: $color_palette.teal
        shape_external: $color_palette.teal
        shape_externalarg: {{ fg: $color_palette.green attr: "b" }}
        shape_filepath: $color_palette.teal
        shape_flag: {{ fg: $color_palette.blue attr: "b" }}
        shape_float: {{ fg: $color_palette.pink attr: "b" }}
        shape_garbage: {{ fg: $color_palette.text bg: $color_palette.red attr: "b" }}
        shape_globpattern: {{ fg: $color_palette.teal attr: "b" }}
        shape_int: {{ fg: $color_palette.pink attr: "b" }}
        shape_internalcall: {{ fg: $color_palette.teal attr: "b" }}
        shape_list: {{ fg: $color_palette.teal attr: "b" }}
        shape_literal: $color_palette.blue
        shape_match_pattern: $color_palette.green
        shape_matching_brackets: {{ attr: "u" }}
        shape_nothing: $color_palette.teal
        shape_operator: $color_palette.peach
        shape_or: {{ fg: $color_palette.pink attr: "b" }}
        shape_pipe: {{ fg: $color_palette.pink attr: "b" }}
        shape_range: {{ fg: $color_palette.peach attr: "b" }}
        shape_record: {{ fg: $color_palette.teal attr: "b" }}
        shape_redirection: {{ fg: $color_palette.pink attr: "b" }}
        shape_signature: {{ fg: $color_palette.green attr: "b" }}
        shape_string: $color_palette.green
        shape_string_interpolation: {{ fg: $color_palette.teal attr: "b" }}
        shape_table: {{ fg: $color_palette.blue attr: "b" }}
        shape_variable: $color_palette.pink

        background: $color_palette.base
        foreground: $color_palette.text
        cursor: $color_palette.cursor
    }}
}}

# Update the Nushell configuration
export def --env "set color_config" [] {{
    $env.config.color_config = (main)
}}

# Update terminal colors
export def "update terminal" [] {{
    let theme = (main)

    # Set terminal colors
    let osc_screen_foreground_color = '10;'
    let osc_screen_background_color = '11;'
    let osc_cursor_color = '12;'

    $"
    (ansi -o $osc_screen_foreground_color)($theme.foreground)(char bel)
    (ansi -o $osc_screen_background_color)($theme.background)(char bel)
    (ansi -o $osc_cursor_color)($theme.cursor)(char bel)
    "
    # Line breaks above are just for source readability
    # but create extra whitespace when activating. Collapse
    # to one line and print with no-newline
    | str replace --all "\\n" ''
    | print -n $"($in)\\r"
}}

export module activate {{
    export-env {{
        set color_config
        update terminal
    }}
}}

# Activate the theme when sourced
use activate
"""
    return nushell_theme

if __name__ == "__main__":
    input_file = os.path.expanduser("~/.cache/wal/colors.json")
    output_file = os.path.expanduser("~/.config/nushell/wal/wal_theme.nu")

    try:
        with open(input_file, "r") as f:
            colors_data = json.load(f)

        nushell_theme_content = generate_nushell_theme(colors_data)

        with open(output_file, "w") as f:
            f.write(nushell_theme_content)

        print(f"Successfully generated Nushell theme to {output_file}")

    except FileNotFoundError:
        print(f"Error: Input file '{input_file}' not found. Make sure pywal has generated the colors.")
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{input_file}'.")
    except Exception as e:
        print(f"An error occurred: {e}")
